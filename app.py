# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\interface2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
from turtle import width
from matplotlib import pyplot as plt, tight_layout
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.animation import FuncAnimation
import threading
import time
import keyboard
from multiprocessing import Pool
from multiprocessing import cpu_count
import signal
import csv


file = None
exitThread = True

stop_loop = 0

temperture = []
clock = []
load = []


def programExit():

    print("Press ESC to stop...")

    while True:
        if keyboard.read_key() == "esc":
            print("SHUTDOWN...")
            os._exit(1)


def exit_chld():
    global stop_loop
    stop_loop = 1


def f(x):
    global stop_loop
    while not stop_loop:
        x * x


def doStress():
    processes = cpu_count()
    print("-" * 20)
    print("Running load on CPU(s)")
    print("Utilizing %d cores" % processes)
    print("-" * 20)
    pool = Pool(processes)
    pool.map(f, range(processes))


class Monitor(object):
    def __init__(self, interval=1):
        self.threshhold = 100
        self.currentIdx = 0
        self.lastIdx = 0
        self.interval = interval
        self.core = None
        self.filter = []

        self.th = threading.Thread(target=self.readData)
        self.th.start()

    def updateFilter(self):
        res = []

        if ui.Temperature.isChecked() is True:
            res.append("Temperature")

        if ui.Clock.isChecked() is True:
            res.append("Clock")

        if ui.Load.isChecked() is True:
            res.append("Load")

        self.filter = res
        return res

    def updateCore(self):
        core = None

        if ui.No1.isChecked() is True:
            core = "#1"
        elif ui.No2.isChecked() is True:
            core = "#2"
        elif ui.No3.isChecked() is True:
            core = "#3"
        elif ui.No4.isChecked() is True:
            core = "#4"
        elif ui.No5.isChecked() is True:
            core = "#5"
        elif ui.No6.isChecked() is True:
            core = "#6"
        elif ui.Total.isChecked() is True:
            core = "Total"

        self.core = core
        return core

    def updateThreshhold(self):
        self.threshhold = ui.horizontalSlider.value()

    def readCSV(self):
        global file

        temperture = []
        clock = []
        load = []

        self.updateCore()
        self.updateFilter()
        self.updateThreshhold()

        with open(file, "r") as csvFile:
            reader = csv.reader(csvFile, delimiter=",")
            for row in reader:
                idx = row[0]
                tag = row[2]
                sensor_type = row[3]
                value = int(row[4])

                if tag == self.core:
                    if sensor_type == "Temperature":
                        temperture.append(value)

                    if sensor_type == "Clock":
                        clock.append(value)

                    if sensor_type == "Load":
                        load.append(value)

        return temperture, clock, load

    def readData(self):
        global file, exitThread

        while True:
            if file is None:
                time.sleep(self.interval)
                continue

            if exitThread is True:
                temperture, clock, load = self.readCSV()

                if len(temperture) > self.threshhold:
                    del temperture[: len(temperture) - self.threshhold]

                if len(clock) > self.threshhold:
                    del clock[: len(clock) - self.threshhold]

                if len(load) > self.threshhold:
                    del load[: len(load) - self.threshhold]

                plt.clf()

                if "Temperature" in self.filter:
                    plt.plot(temperture, "r", label="Temperture")

                if "Clock" in self.filter:
                    plt.plot(clock, "g", label="Clock")

                if "Load" in self.filter:
                    plt.plot(load, "b", label="Load")

                plt.grid()
                plt.legend()

                ui.graph.canvas.draw()


class WidgetPlot(QtWidgets.QWidget):
    def __init__(self, *args, **kwargs):
        plt.style.use("default")
        self.fig = plt.figure()

        QtWidgets.QWidget.__init__(self, *args, **kwargs)
        self.setLayout(QtWidgets.QVBoxLayout())
        self.canvas = FigureCanvas(self.fig)
        self.toolbar = NavigationToolbar(self.canvas, self)
        self.layout().addWidget(self.toolbar)
        self.layout().addWidget(self.canvas)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.graph = WidgetPlot(self.centralwidget)

        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graph.sizePolicy().hasHeightForWidth())

        self.graph.setGeometry(QtCore.QRect(0, 0, 1070, 580))
        self.graph.setSizePolicy(sizePolicy)

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 610, 135, 80))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setContentsMargins(20, 0, 20, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Temperature = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.Temperature.setEnabled(True)
        self.Temperature.setObjectName("Temperature")
        self.verticalLayout.addWidget(self.Temperature)
        self.Clock = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.Clock.setShortcut("")
        self.Clock.setObjectName("Clock")
        self.verticalLayout.addWidget(self.Clock)
        self.Load = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.Load.setObjectName("Load")
        self.verticalLayout.addWidget(self.Load)
        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(170, 610, 192, 84))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(50, 0, 50, 0)
        self.formLayout.setObjectName("formLayout")
        self.No1 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.No1.setObjectName("No1")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.No1)
        self.No2 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.No2.setObjectName("No2")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.No2)
        self.No3 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.No3.setObjectName("No3")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.No3)
        self.No4 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.No4.setObjectName("No4")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.No4)
        self.No5 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.No5.setObjectName("No5")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.No5)
        self.No6 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.No6.setObjectName("No6")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.No6)
        self.Total = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.Total.setObjectName("Total")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.Total)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setEnabled(True)
        self.label.setGeometry(QtCore.QRect(20, 580, 131, 31))
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setEnabled(True)
        self.label_2.setGeometry(QtCore.QRect(170, 580, 191, 31))
        self.label_2.setScaledContents(False)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setWordWrap(False)
        self.label_2.setObjectName("label_2")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(370, 610, 160, 80))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(20, 0, 20, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.start = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.start.setObjectName("start")
        self.verticalLayout_2.addWidget(self.start)
        self.stop = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.stop.setObjectName("stop")
        self.verticalLayout_2.addWidget(self.stop)

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        # self.label_3.setEnabled(True)
        self.label_3.setGeometry(QtCore.QRect(370, 580, 161, 31))
        self.label_3.setScaledContents(False)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setWordWrap(False)
        self.label_3.setObjectName("label_3")

        self.export_3 = QtWidgets.QPushButton(self.centralwidget)
        self.export_3.setGeometry(QtCore.QRect(540, 650, 131, 41))
        self.export_3.setObjectName("export_3")
        self.export_4 = QtWidgets.QPushButton(self.centralwidget)
        self.export_4.setGeometry(QtCore.QRect(680, 650, 131, 41))
        self.export_4.setObjectName("export_4")
        self.export_4.setEnabled(False)
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(540, 610, 521, 31))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setPlaceholderText("CSV File Name")

        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(840, 660, 201, 22))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.setMinimum(50)
        self.horizontalSlider.setMaximum(500)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setEnabled(True)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # self.start.clicked.connect(doStress)
        # self.stop.clicked.connect(exit_chld)

        self.export_3.clicked.connect(self.onEventOK)
        self.export_4.clicked.connect(self.onEventReset)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def onEventOK(self):
        global file, exitThread

        self.export_3.setEnabled(False)
        self.export_4.setEnabled(True)
        self.textEdit.setEnabled(False)

        file = self.textEdit.toPlainText()
        exitThread = True

    def onEventReset(self):
        global file, exitThread

        self.export_3.setEnabled(True)
        self.export_4.setEnabled(False)
        self.textEdit.setEnabled(True)

        file = None
        exitThread = False

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SoYu : Benchmarker"))
        self.Temperature.setText(_translate("MainWindow", "Temperature"))
        self.Clock.setText(_translate("MainWindow", "Clock"))
        self.Load.setText(_translate("MainWindow", "Load"))
        self.No1.setText(_translate("MainWindow", "#1"))
        self.No2.setText(_translate("MainWindow", "#2"))
        self.No3.setText(_translate("MainWindow", "#3"))
        self.No4.setText(_translate("MainWindow", "#4"))
        self.No5.setText(_translate("MainWindow", "#5"))
        self.No6.setText(_translate("MainWindow", "#6"))
        self.Total.setText(_translate("MainWindow", "Total"))
        self.label.setText(_translate("MainWindow", "Data Type"))
        self.label_2.setText(_translate("MainWindow", "Core"))
        self.start.setText(_translate("MainWindow", "Start"))
        self.stop.setText(_translate("MainWindow", "Stop"))
        self.export_3.setText(_translate("MainWindow", "OK"))
        self.label_3.setText(_translate("MainWindow", "CPU Stress"))
        self.export_4.setText(_translate("MainWindow", "Reset"))


signal.signal(signal.SIGINT, exit_chld)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.resize(1080, 720)
    MainWindow.setAnimated(True)
    MainWindow.setFixedWidth(1080)
    MainWindow.setFixedHeight(720)
    MainWindow.setWindowIcon(QIcon("icon.png"))

    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    monitor = Monitor()

    th1 = threading.Thread(target=programExit)
    th1.start()

    MainWindow.show()

    sys.exit(app.exec_())
